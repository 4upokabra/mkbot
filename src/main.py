import asyncio
import logging
from typing import Dict, Any

from telethon import TelegramClient, events
from telethon.errors import FloodWaitError

from .config import API_ID, API_HASH, BOT_TOKEN, load_subjects, get_tz, HW_RETENTION_DAYS
from .db import init_db
from .repositories import users as users_repo
from .repositories import homeworks as hw_repo
from .utils import dates as date_utils
from .keyboards import main_menu, admin_menu, subjects_menu, cancel_menu
from datetime import timedelta


logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

SUBJECTS, SUBJECT_ID_TO_NAME = load_subjects()
TZINFO = get_tz()

# –ü—Ä–æ—Å—Ç–∞—è in-memory FSM
user_states: Dict[int, Dict[str, Any]] = {}


def is_admin(user_id: int) -> bool:
	return users_repo.is_admin(user_id)


def format_homework_item(item: Dict[str, Any]) -> str:
	subject_name = SUBJECT_ID_TO_NAME.get(item["subject_id"], item["subject_id"]) \
		if item.get("subject_id") else ""
	due = date_utils.from_iso(item["due_date"]).strftime("%d.%m.%Y")
	parts = [
		f"üìå {subject_name}: {item['title']}",
		f"üóì –ù–∞ –¥–∞—Ç—É: {due}",
	]
	if item.get("description"):
		parts.append(f"üìù {item['description']}")
	return "\n".join(parts)


def format_homeworks_list(items: list[Dict[str, Any]]) -> str:
	if not items:
		return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
	return "\n\n".join(format_homework_item(i) for i in items)


async def run_periodic_cleanup() -> None:
	while True:
		try:
			# –£–¥–∞–ª—è–µ–º –≤—Å–µ –î–ó, –¥–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞
			today = date_utils.today_in_tz(TZINFO)
			threshold = today if HW_RETENTION_DAYS <= 0 else (today - timedelta(days=HW_RETENTION_DAYS))
			deleted = await hw_repo.delete_due_before(date_utils.to_iso(threshold))
			if deleted:
				logger.info("Auto-cleanup removed %s old homeworks", deleted)
		except Exception as e:
			logger.exception("Cleanup error: %s", e)
		await asyncio.sleep(60 * 60)


async def main() -> None:
	client = TelegramClient("bot", API_ID, API_HASH)
	await init_db()
	await client.start(bot_token=BOT_TOKEN)
	logger.info("Bot started")

	# –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
	asyncio.create_task(run_periodic_cleanup())

	@client.on(events.NewMessage(pattern="/start"))
	async def handler_start(event: events.NewMessage.Event):
		user = await event.get_sender()
		await users_repo.upsert_and_subscribe(user.id, user.first_name or "", user.username)
		text = (
			"–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
			"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
		)
		await event.respond(text, buttons=main_menu())

	@client.on(events.NewMessage(pattern="/admin_menu"))
	async def handler_admin_menu(event: events.NewMessage.Event):
		user = await event.get_sender()
		if not is_admin(user.id):
			await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
			return
		await event.respond("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", buttons=admin_menu())

	@client.on(events.CallbackQuery)
	async def handler_callbacks(event: events.CallbackQuery.Event):
		data = event.data.decode("utf-8", errors="ignore")
		user = await event.get_sender()
		user_id = user.id
		state = user_states.get(user_id)

		try:
			if data == "MENU:ALL":
				items = await hw_repo.list_all()
				await event.answer()
				await event.respond("–í—Å–µ –î–ó:\n\n" + format_homeworks_list(items))
			elif data == "MENU:TOMORROW":
				tomorrow = date_utils.tomorrow_in_tz(TZINFO)
				items = await hw_repo.list_by_date(date_utils.to_iso(tomorrow))
				await event.answer()
				await event.respond("–î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n" + format_homeworks_list(items))
			elif data == "MENU:BY_DATE":
				user_states[user_id] = {"flow": "USER_BY_DATE"}
				await event.answer()
				await event.respond("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", buttons=cancel_menu())
			elif data == "MENU:BY_SUBJECT":
				await event.answer()
				await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", buttons=subjects_menu(SUBJECTS))
			elif data.startswith("SUBJECT:"):
				subject_id = data.split(":", 1)[1]
				if state and state.get("flow") == "ADMIN_ADD" and state.get("step") == "SUBJECT":
					# –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º —à–∞–≥ –∞–¥–º–∏–Ω-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è
					state["data"] = {"subject_id": subject_id}
					state["step"] = "TITLE"
					await event.answer()
					await event.respond("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–ó, –¢–∏–ø–æ–≤–æ–π –∏ —Ç.–¥.)", buttons=cancel_menu())
				else:
					items = await hw_repo.list_by_subject(subject_id)
					await event.answer()
					await event.respond(
						f"–î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {SUBJECT_ID_TO_NAME.get(subject_id, subject_id)}:\n\n" + format_homeworks_list(items)
					)
			elif data == "BACK:MAIN":
				await event.answer()
				await event.respond("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", buttons=main_menu())
			elif data == "ADMIN:ADD_HW":
				if not is_admin(user_id):
					await event.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", alert=True)
					return
				user_states[user_id] = {"flow": "ADMIN_ADD", "step": "SUBJECT", "data": {}}
				await event.answer()
				await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –î–ó:", buttons=subjects_menu(SUBJECTS))
			elif data == "ADMIN:BROADCAST":
				if not is_admin(user_id):
					await event.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", alert=True)
					return
				user_states[user_id] = {"flow": "ADMIN_BROADCAST", "step": "TEXT"}
				await event.answer()
				await event.respond("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", buttons=cancel_menu())
			elif data == "ACTION:CANCEL":
				user_states.pop(user_id, None)
				await event.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
				await event.respond("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", buttons=main_menu())
			else:
				await event.answer()
		except Exception as e:
			logger.exception("Error in callback handler: %s", e)
			await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", alert=True)

	@client.on(events.NewMessage)
	async def handler_messages(event: events.NewMessage.Event):
		user = await event.get_sender()
		user_id = user.id
		text = (event.raw_text or "").strip()
		state = user_states.get(user_id)
		if not state:
			return

		flow = state.get("flow")
		try:
			if flow == "USER_BY_DATE":
				maybe = date_utils.parse_user_date(text)
				if not maybe:
					await event.respond("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –¥–¥.–º–º.–≥–≥–≥–≥", buttons=cancel_menu())
					return
				items = await hw_repo.list_by_date(date_utils.to_iso(maybe))
				user_states.pop(user_id, None)
				await event.respond("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + format_homeworks_list(items), buttons=main_menu())

			elif flow == "ADMIN_ADD":
				step = state.get("step")
				if step == "TITLE":
					state["data"]["title"] = text
					state["step"] = "DESC"
					await event.respond("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", buttons=cancel_menu())
				elif step == "DESC":
					state["data"]["description"] = text
					state["step"] = "DUE"
					await event.respond("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ (–¥–¥.–º–º.–≥–≥–≥–≥)", buttons=cancel_menu())
				elif step == "DUE":
					maybe = date_utils.parse_user_date(text)
					if not maybe:
						await event.respond("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", buttons=cancel_menu())
						return
					payload = state["data"]
					await hw_repo.add_homework(
						payload["subject_id"],
						payload.get("title", "–ó–∞–¥–∞–Ω–∏–µ"),
						payload.get("description", ""),
						date_utils.to_iso(maybe),
						user_id,
					)
					user_states.pop(user_id, None)
					await event.respond("–î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ", buttons=admin_menu() if is_admin(user_id) else main_menu())

			elif flow == "ADMIN_BROADCAST":
				# –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º
				user_states.pop(user_id, None)
				await event.respond("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É‚Ä¶")
				user_ids = await users_repo.get_all_subscribed_user_ids()
				sent = 0
				errors = 0
				for uid in user_ids:
					try:
						await event.client.send_message(uid, text)
						sent += 1
					except FloodWaitError as fw:
						await asyncio.sleep(int(fw.seconds) + 1)
						try:
							await event.client.send_message(uid, text)
							sent += 1
						except Exception:
							errors += 1
					except Exception:
						errors += 1
				await event.respond(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö–æ–≤: {sent}, –æ—à–∏–±–æ–∫: {errors}")
		except Exception as e:
			logger.exception("Error in message handler: %s", e)
			await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

	await client.run_until_disconnected()


if __name__ == "__main__":
	asyncio.run(main())
